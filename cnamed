#!/usr/bin/python3
#Copyright 2011 Matthew J. Smith (matt@forsetti.com)
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at

#  http://www.apache.org/licenses/LICENSE-2.0

#Unless required by applicable law or agreed to in writing, software
#distributed under the License is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and
#limitations under the License.

import os
import sys
import re
import socketserver
import threading
import random

class ThreadedUDPServer(socketserver.ThreadingMixIn, socketserver.UDPServer):
	"""Simple class to create a Threaded UDP Server by mixing the
	ThreadingMixIn and UDPServer."""
	pass

class UDPDNSHandler(socketserver.BaseRequestHandler):
	"""socketserver UDP handler.  Passes DNS request to aliasdb, and
	returns response."""
	def handle(self):
		#Request
		message = self.request[0]
		sock = self.request[1]
		#Response
		message=self.server.aliasdb.resolve(message)
		if(len(message)>512):
			message[2]|=0x02
		sock.sendto(message[:512], self.client_address)

class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
	"""Simple class to create a Threaded TCP Server by mixing the
	ThreadingMixIn and TCPServer."""
	pass

class TCPDNSHandler(socketserver.BaseRequestHandler):
	"""socketserver TCP handler.  Reads DNS request size from first two
	bytes of stream, then passes remaining message to aliasdb.  Upon
	receiving response, writes 2 byte size of response and response.
	"""
	def handle(self):
		#Request
		message=bytes()
		s=self.request.recv(2)
		message_size=(s[0]<<8)+s[1]
		while(message_size>0):
			message+=self.request.recv(size)
			message_size-=len(message)
		#Response
		message=self.server.aliasdb.resolve(message)
		message_size=len(message)
		self.request.send(bytes([message_size>>8,message_size%256]))
		self.request.send(message)
		self.request.close()

class UnixStreamServer(socketserver.UnixStreamServer):
	
	def __init__(self,*args,controller=None,**kwargs):
		socketserver.UnixStreamServer.__init__(self,*args,**kwargs)
		self.controller=controller
		
	"""Local UnixStreamServer to override handle_error()."""
	def handle_error(self, request,client_address):
		"""If exception is thrown by child thread, rethrow in main"""
		ei=sys.exc_info()
		if(ei[1]): raise(ei[1])
		print(sys.exc_info())
		
class USSHandler(socketserver.StreamRequestHandler):
	"""UnixStreamServer handler to connect the socket stream to the 
	CommandController for interactive control of CNameD."""
	def handle(self):
		self.server.controller.handle(self.rfile,self.wfile)
		
	
class CommandController():
	"""CommandController accepts a single "commander" object at construction time,
	then upon call to handle(in,out) parses an input stream into line-delimited
	commands, with each command parsed into space-delimited operation
	and parameters, then calls each operation as a method on commander,
	passing the parameters to the method.  Any strings returned are
	passed to the output stream.  The final line returned after each
	command a numeric code follwed by a single-word error name in
	parens, e.g. "3: (ERROR)"."""
	ERRORS=["OK","SYSTEM: System Error","INVALID: Invalid Command","PARAMS: Invalid Parameters"]
		
	def __init__(self,commandlet):
		self.commandlet=commandlet
		
	def handle(self,instream, outstream):
		code=0
		while True:
			try:
				outstream.write(("%%%s %s\n"%(code,self.ERRORS[code])).encode())
				outstream.flush()
				line=instream.readline().decode()

				#Test for EOF, end session
				if(not line): return
				
				command=line.strip().split()
				
				#Test for blank line, ignore
				if(len(command)==0): continue
				
				#Test for "?", print help - all commands and docstrings
				if(command[0]=="?" and len(command)==1):
					outstream.write(("# Use \"? <command>\" for help on a specific command: %s\n"%(", ".join([a for a in dir(self.commandlet) if(re.match("^[a-zA-Z][a-zA-Z0-9_]*$",a))]))).encode())

				#Test for "? command", print command docstring
				elif(command[0]=="?" and len(command)==2):
					import inspect
					f=getattr(self.commandlet,command[1])
					args=inspect.getfullargspec(f)[0]
					doc=getattr(self.commandlet,command[1]).__doc__
					if(not doc): doc="No documentation available"
					doc=doc.replace("\n","\n# ")
					outstream.write(("# "+command[1]+" "+" ".join(["[%s]"%(a) for a in args if a!="self"])+" : "+doc+"\n").encode())
					
				#Test for "command" - all commands must start with a letter, and be followed with alpha, num, or _
				elif(not re.match("^[a-zA-Z][a-zA-Z0-9_]*$",command[0])): raise AttributeError()
				else:
					#Try call of command on commandlet, throws AttributeError if not valid
					s=getattr(self.commandlet,command[0])(*command[1:])
					if(not s):s=""
					outstream.write((s+"\n").encode())
				code=0
			except AttributeError as e:
				code=2
			except TypeError as e:
				code=3
			except ValueError as e:
				code=3
			except Exception as e:
				code=1
				print("***")
				import traceback
				traceback.print_exc()
			finally:
				outstream.flush()

class CNamedCommander():
	"""Provides methods to update, query, and control the aliasdb."""
	def __init__(self,aliasdb):
		self.__data__=dict()
		self.__aliasdb__=aliasdb
		
	def echo(self,*args):
		"""Returns all arguments"""
		return(" ".join(args))
	
	def shutdown(self):
		"""Shutdown %s"""%(sys.argv[0])
		sys.exit(0)

	def alias(self, alias, hostname,weight):
		"""Adds an alias to hostname mapping with supplied weight and optional ttl (defaults to 0)"""
		self.__aliasdb__.update(alias,hostname,int(weight))
		
#	def dump(self):
#		"""Dump database in loadable format"""
#		return("".join(["alias %s\n"%(alias) for alias in self.data]))

	def listen(self, protocol,address, port):
		"""Start listener for protocol(udp|tcp) on address:port"""
		port=int(port)
		if(protocol=="udp"):
			udpServer = ThreadedUDPServer((address, port), UDPDNSHandler)
			udpServer.aliasdb=self.__aliasdb__
			udp_thread = threading.Thread(target=udpServer.serve_forever)
			udp_thread.setDaemon(True)
			udp_thread.start()
		elif(protocol=="tcp"):
			tcpServer = ThreadedTCPServer((address, port), TCPDNSHandler)
			tcpServer.aliasdb=self.__aliasdb__
			tcp_thread = threading.Thread(target=tcpServer.serve_forever)
			tcp_thread.setDaemon(True)
			tcp_thread.start()
		else:
			raise(TypeError())
		
		
class AliasDB():
	"""Does the heavy lifting of encoding/decoding and resolving queries."""
	def __init__(self):
		self.__data__=dict()

	def update(self,qname,rname,weight):
		question=self.encode_name(qname)
		answer=self.encode_answer(question,rname)
		self.__data__[question]=[a for a in self.__data__.get(question,list()) if a!=answer]
		self.__data__[question]+=[answer]*weight
			
	def encode_name(self, name):
		labels=name.split(".")

		enc=bytes(0)
		for label in labels:
			assert(len(label)<=63)
			enc+=bytes([len(label)])+label.encode()
		enc+=bytes([0])
		return(enc)

	def decode_name(self, name):
		i=0
		domainname=""
		while(name[i]):
			next=i+name[i]+1
			domainname+=name[i+1:next].decode()+"."
			i=next
		return(domainname[:-1]) #Drop trailing period

	def encode_answer(self,eqname,rname):
		ername=self.encode_name(rname)
		size=len(ername)
		#RR is encoded qname+TYPE=CNAME+CLASS=IN+TTL=0+size(encoded name)+encoded name
		return(eqname+bytes([0x00,0x05,0x00,0x01,0x00,0x00,0x00,0x00])+bytes([size>>8,size%256])+ername)

	def resolve(self,request):
		header=bytearray(request[0:12])
		question=request[12:]
		if ( not((header[2]&0x80 == 0) and (header[2]&0x78 == 0 ) and (header[3]&0x70 == 0 ))): #qr=query && opcode=QUERY  && Z=0
			header[2]|= 0x84 #set QR,AA flags
			header[2]&= 0x87 #clr OPCODE,TC
			header[3] =0x01  #set RCODE=1,clr RA,Z
			response=header+question
			return(response)
			
		header[2]|= 0x84 #set QR,AA
		header[2]&= 0xFD #clr TC
		header[3] = 0x00 #clr RA,Z,RCODE
		header[6:12]=[0x00,0x01,0x00,0x00,0x00,0x00] #Set ANCOUNT=1

		#Validate QCLASS=IN and QTYPE=A or QTYPE=CNAME
		if(question[-4]==0 and question[-2]==0 and question[-1]==1 and (question[-3]==1 or question[-3]==5)):
			answers=self.__data__.get(question[:-4])
			if(answers):
				response=header+question+random.choice(answers)
			else:
				header[3]|=0x03
				response=header+question
		else:
			header[3]|=0x04
			response=header+question
		
		return(response)


if __name__ == "__main__":
	sockpath=None
	ussServer=None
	if(len(sys.argv)==2):
		sockpath=sys.argv[1]
		ussServer=UnixStreamServer(sockpath,USSHandler,controller=CommandController(CNamedCommander(AliasDB())))
		try:
			ussServer.serve_forever()
		except KeyboardInterrupt:
			print("Keyboard shutdown (^C) detected.")
		except SystemExit:
			print("Shutdown requested")
		finally:
			if(sockpath):os.unlink(sockpath)
			if(ussServer):ussServer.server_close()
	else:
		try:
			c=CommandController(CNamedCommander(AliasDB())).handle(sys.stdin.buffer,sys.stdout.buffer)
		except KeyboardInterrupt:
			print("Keyboard shutdown (^C) detected.")		
		except SystemExit:
			print("Shutdown requested")
	exit(0)
			
